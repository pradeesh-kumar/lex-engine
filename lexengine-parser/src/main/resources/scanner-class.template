package ${package};

import java.io.FileReader;
import java.util.Stack;
import java.util.BitSet;
import java.util.Map;
import java.util.HashMap;
import java.io.*;
import java.nio.ByteBuffer;
import java.util.Base64;
import java.util.zip.GZIPInputStream;

import org.lexengine.parser.core.Token;
import org.lexengine.parser.core.Lexer;

/**
 * A lexer implementation that tokenizes input from a given source path or reader.
 */
public class ${className} implements Lexer {

  /**
   * Number of states used in the finite state machine.
   */
  private static final int STATES_COUNT = ${statesCount};

  /**
   * Number of alphabets used in the finite state machine.
   */
  private static final int ALPHABETS_COUNT = ${alphabetsCount};

  /**
   * Starting state of the finite state machine.
   */
  private static final int START_STATE = ${startState};

  /**
   * Default buffer size for reading input.
   */
  private static final int DEFAULT_BUFFER_SIZE = 1024;

  private final int[][] transitionTbl;

  /**
   * Set of final states in the finite state machine.
   */
  private final BitSet finalStates;

  /**
   * Mapping of characters to their corresponding indices in the alphabet.
   */
  private final Map<Integer, Integer> alphabetIndex;

  /**
   * Buffer for reading input.
   */
  private final DynamicCharBuffer buffer;

  /**
   * Peeked token.
   */
  private ${returnType} peek;

  /**
   * Value associated with the current token.
   */
  private String value;

  /**
   * Current row number in the source.
   */
  private int curRow;

  /**
   * Current column number in the source.
   */
  private int curCol;

  /**
   * Constructs a new lexer instance from a file path.
   *
   * @param sourcePath path to the input file
   * @throws FileNotFoundException if the file does not exist
   */
  public ${className}(String sourcePath) throws FileNotFoundException {
    this(new FileReader(sourcePath));
  }

  /**
   * Constructs a new lexer instance from a reader.
   *
   * @param reader input reader
   */
  public ${className}(Reader reader) {
    this.buffer = new DynamicCharBuffer(reader, DEFAULT_BUFFER_SIZE);
    this.alphabetIndex = loadAlphabetIndex();
    this.finalStates = BitSet.valueOf(new long[] {${finalStates}});
    this.transitionTbl = decompress("${compressedTransitionTbl}");
    this.curRow = -1;
    this.curCol = -1;
  }

  /**
   * Checks if there are more tokens available.
   *
   * @return true if there are more tokens, false otherwise
   */
  @Override
  public boolean hasNext() {
    if (peek == null) {
      peek = next();
    }
    return peek != null;
  }

  /**
   * Returns the next token without consuming it.
   *
   * @return the next token, or null if none available
   */
  @Override
  public ${returnType} peek() {
    return this.peek;
  }

  /**
   * Returns the next token and consumes it.
   *
   * @return the next token, or null if none available
   */
  @Override
  public ${returnType} ${methodName}() {
    if (peek != null) {
      ${returnType} t = peek;
      peek = null;
      return t;
    }
    do {
      int state = advance();
      switch (state) {
${switchCases}
        case -1 -> { return null; }
        default -> throw new LexerException("Unrecognized state " + state);
      }
    } while (true);
  }

  /**
   * Returns the value associated with the current token.
   *
   * @return the token value
   */
  public String value() {
    return this.value;
  }

  /**
   * Returns the current row number.
   *
   * @return the current row number
   */
  public int currentRow() {
    return this.curRow;
  }

  /**
   * Returns the current column number.
   *
   * @return the current column number
   */
  public int currentCol() {
    return this.curCol;
  }

  private int advance() {
    if (!buffer.hasNext()) {
      return -1;
    }
    int curSt = START_STATE;
    Stack<Integer> stStack = new Stack<>();
    stStack.push(curSt);
    boolean foundFinalState = finalStates.get(curSt);
    while (buffer.hasNext()) {
      char curCh = buffer.next();
      if (curCh == '\n' || curCh == '\r') {
        curRow++;
      } else {
        curCol++;
      }
      Integer index = alphabetIndex.get((int) curCh);
      if (index == null) {
        throw new LexerException(String.format("Invalid character '%c' found in the source", curCh));
      }
      int nextSt = transitionTbl[curSt][index];
      if (finalStates.get(nextSt)) stStack.clear();
      stStack.push(nextSt);
      if (nextSt == 0) {
        return lookupFinalState(stStack, foundFinalState);
      }
      if (finalStates.get(nextSt)) {
        foundFinalState = true;
      }
      curSt = nextSt;
    }
    return lookupFinalState(stStack, foundFinalState);
  }

  private int lookupFinalState(Stack<Integer> stStack, boolean foundFinalState) {
    if (!foundFinalState) {
      throw new LexerException(String.format("Cannot resolve symbol '%s'", buffer.getStringTillCurrent()));
    }
    while (!finalStates.get(stStack.peek())) {
      stStack.pop();
      buffer.rollback();
    }
    this.value = buffer.getStringTillCurrent();
    buffer.clearTillCurrent();
    return stStack.peek();
  }

  private int[][] decompress(String base64Data) {
    byte[] compressedData = Base64.getDecoder().decode(base64Data);
    try {
      byte[] decompressedData = decompress(compressedData);
      return deserialize2DArray(decompressedData, STATES_COUNT, ALPHABETS_COUNT);
    } catch (IOException e) {
      throw new LexerException("Failed to decompress the state", e);
    }
  }

  private static byte[] decompress(byte[] data) throws IOException {
    ByteArrayInputStream byteStream = new ByteArrayInputStream(data);
    try (GZIPInputStream gzipIS = new GZIPInputStream(byteStream);
      ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
      byte[] buffer = new byte[1024];
      int len;
      while ((len = gzipIS.read(buffer)) != -1) {
        outputStream.write(buffer, 0, len);
      }
      return outputStream.toByteArray();
    }
  }

  private static int[][] deserialize2DArray(byte[] data, int rows, int cols) {
    int[][] array = new int[rows][cols];
    ByteBuffer buffer = ByteBuffer.wrap(data);
    for (int i = 0; i < rows; i++) {
      for (int j = 0; j < cols; j++) {
        array[i][j] = buffer.getInt();
      }
    }
    return array;
  }

  private static Map<Integer, Integer> loadAlphabetIndex() {
    Map<Integer, Integer> map = new HashMap<>();
${alphabetIndex}
    return Map.copyOf(map);
  }


  /**
   * Exception thrown when an error occurs during lexing.
   */
  public static class LexerException extends RuntimeException {
    public LexerException(String message) {
      super(message);
    }

    public LexerException(String message, Throwable cause) {
      super(message, cause);
    }
  }
}

/**
 * A dynamic character buffer that reads characters from an underlying {@link Reader} and stores them in a
 * dynamically-sized array. This allows for efficient reading and manipulation of large amounts of text data.
 */
class DynamicCharBuffer {

  /**
   * Default initial capacity of the buffer.
   */
  private static final int DEFAULT_BUFFER_SIZE = 256;

  /**
   * Underlying reader providing the source of characters.
   */
  private final Reader reader;

  /**
   * Current buffer holding the characters.
   */
  private char[] buffer;

  /**
   * Number of valid characters currently stored in the buffer.
   */
  private int length;

  /**
   * Index into the buffer where the next character will be returned from.
   */
  private int index;

  /**
   * Starting index within the buffer where the current "window" begins.
   */
  private int startIndex;

  /**
   * Flag indicating whether the end-of-file has been reached on the underlying reader.
   */
  private boolean eof;

  /**
   * Initial capacity specified when creating the buffer.
   */
  private final int initialCapacity;

  /**
   * Constructs a new DynamicCharBuffer instance with the default initial capacity.
   *
   * @param reader the underlying reader to read characters from
   */
  public DynamicCharBuffer(Reader reader) {
    this(reader, DEFAULT_BUFFER_SIZE);
  }

  /**
   * Constructs a new DynamicCharBuffer instance with the specified initial capacity.
   *
   * @param reader         the underlying reader to read characters from
   * @param initialCapacity the initial capacity of the buffer
   * @throws IllegalArgumentException if the initial capacity is less than or equal to zero
   */
  public DynamicCharBuffer(Reader reader, int initialCapacity) {
    if (initialCapacity <= 0) {
      throw new IllegalArgumentException("Capacity must be greater than 0");
    }
    this.initialCapacity = initialCapacity;
    this.reader = reader;
    this.buffer = null;
    this.index = 0;
    this.startIndex = 0;
    this.length = 0;
    this.eof = false;
    loadBufferIfRequired();
  }

  /**
   * Returns whether there are more characters available in the buffer.
   *
   * @return true if there are more characters available, false otherwise
   */
  public boolean hasNext() {
    loadBufferIfRequired();
    return index < length || !eof;
  }

  /**
   * Returns the next character from the buffer without removing it.
   *
   * @return the next character, or '\0' if no more characters are available
   */
  public char next() {
    if (!hasNext()) {
      return '\0';
    }
    return buffer[index++];
  }

  /**
   * Peeks at the next character in the buffer without advancing the index.
   *
   * @return the next character, or '\0' if no more characters are available
   */
  public char peek() {
    if (!hasNext()) {
      return '\0';
    }
    return buffer[index];
  }

  /**
   * Returns the number of valid characters currently stored in the buffer.
   *
   * @return the number of valid characters
   */
  public int size() {
    return length;
  }

  /**
   * Returns the current capacity of the buffer.
   *
   * @return the current capacity
   */
  public int capacity() {
    return buffer.length;
  }

  /**
   * Rolls back the index by one position, effectively undoing the last call to {@link #next()}.
   */
  public void rollback() {
    if (index >= startIndex) {
      --index;
    }
  }

  /**
   * Clears all characters up to the current index, resetting the start index.
   */
  public void clearTillCurrent() {
    this.startIndex = index;
  }

  /**
   * Returns a string containing all characters between the start index and the current index.
   *
   * @return the extracted string
   */
  public String getStringTillCurrent() {
    return new String(buffer, startIndex, index - startIndex);
  }

  /**
   * Loads more characters into the buffer if necessary.
   */
  private void loadBufferIfRequired() {
    if (eof || index < length) {
      return;
    }
    int newCapacity = length == 0 || startIndex > (length >> 1) ? initialCapacity : length * 2;
    char[] newBuffer = new char[newCapacity];
    if (buffer == null) {
      buffer = newBuffer;
    } else {
      System.arraycopy(buffer, startIndex, newBuffer, 0, length - startIndex);
      length -= startIndex;
      index -= startIndex;
      startIndex = 0;
    }
    try {
      int readSize = reader.read(newBuffer, length, buffer.length - length);
      if (readSize == -1) {
        eof = true;
        reader.close();
        return;
      }
      buffer = newBuffer;
      length = length + readSize;
    } catch (IOException e) {
      throw new DynamicBufferException("Error while reading from buffer!", e);
    }
  }

  /**
   * Custom exception thrown when an error occurs during buffer operations.
   */
  public static class DynamicBufferException extends RuntimeException {

    /**
     * Constructs a new DynamicBufferException instance.
     *
     * @param message the error message
     * @param cause   the underlying cause
     */
    public DynamicBufferException(String message, Throwable cause) {
      super(message, cause);
    }
  }
}
