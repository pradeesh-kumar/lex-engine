package ${package};

import java.util.Stack;

/**
 * The Parser consumes given tokens and generates parse tree for the given Grammar.
 */
public class ${className} {

  private final Lexer lexer;
  private final Stack<Symbol> symbolStack;

  public ${className}(Lexer lexer) {
    this.lexer = lexer;
    this.symbolStack = new Stack<>();
  }

  public AST parse() {

  }

  void accept(Token testToken) {

  }

  ${symbolMatcherMethods}

  /**
   * Exception thrown when an error occurs during parsing.
   */
  public static class ParserException extends RuntimeException {
    public ParserException(String message) {
      super(message);
    }

    public ParserException(String message, Throwable cause) {
      super(message, cause);
    }
  }

  public interface Lexer {

    boolean hasNext();

    Token peek();

    Token next();

    interface Token {
      String name();
      String value();
    }
  }

  /**
   * Symbol class declarations area
   */
  ${symbolClassDeclarations}
}
