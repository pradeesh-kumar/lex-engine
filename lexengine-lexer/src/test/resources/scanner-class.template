package ${package};

import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.util.BitSet;
import java.io.*;
import java.nio.ByteBuffer;
import java.util.Base64;
import java.util.zip.GZIPInputStream;

public class ${className} {

  private static final int STATES_COUNT = ${statesCount};
  private static final int ALPHABETS_COUNT = ${alphabetsCount};
  private static final int START_STATE = ${startState};
  private static final int SOURCE_BUFFER_SIZE = 1024;

  private final int[][] transitionTbl;
  private final BitSet finalStates;
  private final Reader source;
  private String currentMatch;
  private int curFinalState;

  public ${className}(String sourcePath) {
    this(new FileReader(sourcePath));
  }

  public ${className}(Reader source) {
    this.source = new BufferedReader(source, SOURCE_BUFFER_SIZE);
    this.finalStates = BitSet.valueOf(new long[] {${finalStates}});
    this.transitionTbl = decompress("${compressedTransitionTbl}");
  }

  private int advance() {
    int codePoint;
    int curSt = START_STATE;
    Stack<Integer> stStack = new Stack<>();
    while ((codePoint = source.read()) != -1) {
      nextSt = this.transitionTbl[curState][codePoint];
      if (nextSt == 0) {
        break;
      }
    }


  }

  public boolean hasNext() {
    return peek() != null;
  }

  public ${returnType} peek() {
    if (this.curToken == null) {

    }
  }

  public ${returnType} ${methodName}() {
    int state = advance();
    switch (state) {
${switchCases}
      default:
        throw new LexerException("Unrecognized state " + state);
    }
  }

  public String currentMatch() {
    return this.currentMatch;
  }

  private int[][] decompress(String base64Data) {
    byte[] compressedData = Base64.getDecoder().decode(base64Data);
    byte[] decompressedData = decompress(compressedData);
    return deserializeInt2DArray(decompressedData, STATES_COUNT, ALPHABETS_COUNT);
  }

  private static byte[] decompress(byte[] data) throws IOException {
    ByteArrayInputStream byteStream = new ByteArrayInputStream(data);
    try (GZIPInputStream gzipIS = new GZIPInputStream(byteStream);
      ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
      byte[] buffer = new byte[1024];
      int len;
      while ((len = gzipIS.read(buffer)) != -1) {
        outputStream.write(buffer, 0, len);
      }
      return outputStream.toByteArray();
    }
  }

  private static int[][] deserializeInt2DArray(byte[] data, int rows, int cols) {
    int[][] array = new int[rows][cols];
    ByteBuffer buffer = ByteBuffer.wrap(data);
    for (int i = 0; i < rows; i++) {
      for (int j = 0; j < cols; j++) {
        array[i][j] = buffer.getInt();
      }
    }
    return array;
  }

  public static class LexerException extends RuntimeException {
    public LexerException(String message) {
      super(message);
    }
  }
}
